// Generated by the Maven Archetype Plug-in
package br.com.doit.multitenant.components;

import br.com.doit.multitenant.api.Tenant;
import br.com.doit.multitenant.api.TenantImpl;
import br.com.doit.multitenant.app.Application;
import br.com.doit.multitenant.migration.MultiTenantMigrator;
import br.com.doit.multitenant.model.User;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;

import er.extensions.components.ERXComponent;
import er.extensions.migration.ERXMigrator;

/**
 * @author <a href="mailto:hprange@gmail.com">Henrique Prange</a>
 */
@SuppressWarnings("serial")
public class Main extends ERXComponent
{
	public Tenant currentTenant;

	public User currentUser;

	private EOEditingContext editingContext;

	public String newTenantDatabaseUrl;

	public String newTenantIdentifier;

	public String newUserLogin;

	public Tenant selectedTenant;

	public Tenant tenantItem;

	public Main(WOContext context)
	{
		super(context);
	}

	public WOActionResults addUser()
	{
		EOEditingContext editingContext = editingContext();

		User user = User.createUser(editingContext);

		user.setLogin(newUserLogin);

		editingContext.saveChanges();

		newUserLogin = null;

		return context().page();
	}

	@Override
	public Application application()
	{
		return (Application) super.application();
	}

	public NSArray<Tenant> availableTenants()
	{
		return new NSArray<Tenant>(application().tenants().allValues());
	}

	@Override
	public void awake()
	{
		super.awake();

		editingContext = null;
	}

	public WOActionResults createNewTenant()
	{
		if(newTenantIdentifier == null || newTenantDatabaseUrl == null)
		{
			return context().page();
		}

		Tenant tenant = new TenantImpl(newTenantIdentifier, newTenantDatabaseUrl);

		application().tenants().put(newTenantIdentifier, tenant);

		ERXMigrator migrator = new MultiTenantMigrator("Sample", tenant);

		migrator.migrateToLatest();

		newTenantIdentifier = null;
		newTenantDatabaseUrl = null;

		return context().page();
	}

	protected EOEditingContext editingContext()
	{
		if(editingContext == null)
		{
			editingContext = Application.application().newEditingContextForTenant(selectedTenant);
		}

		return editingContext;
	}

	public boolean hasUsers()
	{
		return !users().isEmpty();
	}

	public WOActionResults showUsersForTenant()
	{
		return context().page();
	}

	public NSArray<User> users()
	{
		if(selectedTenant == null)
		{
			return NSArray.<User> emptyArray();
		}

		return User.fetchAllUsers(editingContext());
	}

	public NSArray<User> usersForCurrentTenant()
	{
		return User.fetchAllUsers(Application.application().newEditingContextForTenant(currentTenant));
	}
}
